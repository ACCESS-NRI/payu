#!/usr/bin/env python
# coding: utf-8

import argparse
import os
import payu
import sys
import shutil as sh
import shlex
import subprocess as sp
import yaml

# TODO: Move to payu (somehow)
model_index = {'mom': payu.Mom,
               'mom4': payu.mom4,
               'mitgcm': payu.mitgcm,
               'gold': payu.gold}
default_config_fname = 'config.yaml'


#----------------
def payu_parse():

    #------------------
    # Parser generation

    parser = argparse.ArgumentParser()

    parser.add_argument('-m', '--model',
                        action='store',
                        dest='model_name',
                        default=None,
                        help='Select model type')

    parser.add_argument('-c', '--config',
                        action='store',
                        dest='config_path',
                        default=None,
                        help='Configuration path')

    subcmd = parser.add_subparsers()

    sweep_cmd = subcmd.add_parser('sweep')
    sweep_cmd.set_defaults(cmd=call_sweep)

    sweep_cmd.add_argument('--hard',
                           action='store_true',
                           dest='hard_sweep')

    list_cmd = subcmd.add_parser('list')
    list_cmd.set_defaults(cmd=call_list)

    run_cmd = subcmd.add_parser('run')
    run_cmd.set_defaults(cmd=call_run)

    run_cmd.add_argument('--count', '-c',
                         action='store',
                         dest='counter')

    # `args` is passed on to other functions after removing principal payu tags
    # so we convert it to a dict using `vars`
    args = vars(parser.parse_args())

    # Skip validation when listing supported models
    if args['cmd'] == call_list:
        call_list()
        sys.exit()

    config_path = args.pop('config_path')
    model_name = args.pop('model_name')

    #--------------------
    # Payu tag validation

    # Validate the configuration file path
    if config_path and not os.path.isfile(config_path):
        sys.exit('Error: Configuration file {f} does not exist.'.format(
                    f=config_path))

    # Assign the default config path if it exists
    if not config_path and os.path.isfile(default_config_fname):
        config_path = os.path.join(os.curdir, default_config_fname)

    # If no model name is specified, then check the config path
    if not model_name and config_path and os.path.isfile(config_path):
        with open(config_path, 'r') as config_file:
            config = yaml.load(config_file)
        try:
            model_name = config['model']
        except KeyError:
            pass

    # If there is still no defined model_name, try the parent directory
    if not model_name:
        model_name = os.path.basename(os.path.abspath(os.pardir))
        if not model_name in model_index.keys():
            sys.exit('payu: error: Unknown model.')
        else:
            print('payu: warning: Assuming model is {model} based on '
                  'parent directory name.'.format(model=model_name))

    #---------------------
    # Subcommand execution

    payu_cmd = args.pop('cmd')
    payu_cmd(model_name, config_path, **args)


#---
def call_run(model_name, config_path, counter):

    # TODO: read as input
    pbs_flags = '-q normal -P v45 -l walltime=0:15:00 -l ncpus=960 ' \
                '-l vmem=1440GB -N gfdl1080 -wd -joe'.format(os.getcwd())

    run_cmd = os.path.join(os.path.dirname(__file__), 'payu-run')
    cmd = 'qsub {0} {1} -v payu_model={2}'.format(run_cmd, pbs_flags, model_name)

    cmd = shlex.split(cmd)
    rc = sp.call(cmd)
    assert rc == 0


#---
def call_sweep(model_name, config_path, hard_sweep=False):
 
    cmd = 'payu-sweep -m {0} -c {1}'.format(model_name, config_path)
    if hard_sweep:
        cmd = ' '.join([cmd, '--hard'])

    cmd = shlex.split(cmd)
    rc = sp.call(cmd)
    assert rc == 0


#---
def call_list():
    print('Supported models: {0}'.format(' '.join(model_index.keys())))


#-------------------------
if __name__ == '__main__':

    # Default to display help if no subcommands or arguments are provided
    # NOTE: This can be removed after argparse supports default subparsers
    if len(sys.argv) == 1:
        sys.argv.append('-h')

    payu_parse()

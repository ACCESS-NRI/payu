#!/usr/bin/env python
# coding: utf-8

import argparse
import os
import payu
import sys
import shutil as sh
import shlex
from socket import gethostname
import subprocess as sp
import yaml

# TODO: Move to payu (somehow)
model_index = {'mom': payu.Mom,
               'mom4': payu.mom4,
               'mitgcm': payu.mitgcm,
               'gold': payu.gold}
default_config_fname = 'config.yaml'


#----------------
def payu_parse():

    #------------------
    # Parser generation

    parser = argparse.ArgumentParser()

    parser.add_argument('-m', '--model',
                        action='store',
                        dest='model_name',
                        default=None,
                        help='Select model type')

    parser.add_argument('-c', '--config',
                        action='store',
                        dest='config_path',
                        default=None,
                        help='Configuration path')

    subcmd = parser.add_subparsers()

    sweep_cmd = subcmd.add_parser('sweep')
    sweep_cmd.set_defaults(cmd=call_sweep)

    sweep_cmd.add_argument('--hard',
                           action='store_true',
                           dest='hard_sweep')

    list_cmd = subcmd.add_parser('list')
    list_cmd.set_defaults(cmd=call_list)

    run_cmd = subcmd.add_parser('run')
    run_cmd.set_defaults(cmd=call_run)

    run_cmd.add_argument('--initial', '-i',
                         action='store',
                         dest='init_run')

    run_cmd.add_argument('--nruns', '-n',
                         action='store',
                         dest='n_runs')

    collate_cmd = subcmd.add_parser('collate')
    collate_cmd.set_defaults(cmd=call_collate)

    collate_cmd.add_argument('--initial', '-i',
                         action='store',
                         dest='init_run')

    collate_cmd.add_argument('--nruns', '-n',
                         action='store',
                         dest='n_runs')

    # `args` is passed on to other functions after removing principal payu tags
    # so we convert it to a dict using `vars`
    args = parser.parse_args()

    # Skip validation when listing supported models
    if args.cmd == call_list:
        call_list()
        sys.exit()

    config_path = args.config_path
    model_name = args.model_name

    #--------------------
    # Payu tag validation

    # Validate the configuration file path
    if config_path and not os.path.isfile(config_path):
        sys.exit('Error: Configuration file {f} does not exist.'.format(
                    f=config_path))

    # Assign the default config path if it exists
    if not config_path and os.path.isfile(default_config_fname):
        config_path = os.path.join(os.curdir, default_config_fname)

    # If no model name is specified, then check the config path
    if not model_name and config_path and os.path.isfile(config_path):
        with open(config_path, 'r') as config_file:
            config = yaml.load(config_file)
        try:
            model_name = config['model']
        except KeyError:
            pass

    # If there is still no defined model_name, try the parent directory
    if not model_name:
        model_name = os.path.basename(os.path.abspath(os.pardir))
        if not model_name in model_index.keys():
            sys.exit('payu: error: Unknown model.')
        else:
            print('payu: warning: Assuming model is {model} based on '
                  'parent directory name.'.format(model=model_name))

    #---
    # Counters
    if args.cmd in (call_run, call_collate):
        # TODO: Check archive, use most recent run
        counter = int(args.init_run or 0)
        assert counter >= 0

        n_runs = int(args.n_runs or 1)
        assert n_runs > 0
        max_counter = counter + n_runs - 1

        args.cmd(model_name, config_path, counter, max_counter)

    elif args.cmd == call_sweep:
        call_sweep(model_name, config_path, args.hard_sweep)

    else:
        sys.exit("payu: Unknown subcommand {0}".format(args.cmd))


#---
def call_run(model_name, config_path, counter, max_counter):

    pbs_flags = []
    with open(config_path, 'r') as config_file:
        config = yaml.load(config_file)

        pbs_queue = config['queue']
        if pbs_queue:
            pbs_flags.append('-q {0}'.format(pbs_queue))

        pbs_project = config['project']
        if pbs_project:
            pbs_flags.append('-P {0}'.format(pbs_project))

        pbs_walltime = config['walltime']
        if pbs_walltime:
            pbs_flags.append('-l walltime={0}'.format(pbs_walltime))

        pbs_ncpus = config['ncpus']
        if pbs_ncpus:
            pbs_flags.append('-l ncpus={0}'.format(pbs_ncpus))

        mem_resource = 'vmem' if gethostname().startswith('vayu') else 'mem'
        pbs_mem = config['mem']
        if pbs_mem:
            pbs_flags.append('-l {0}={1}'.format(mem_resource, pbs_mem))

        pbs_jobname = config['jobname']
        if pbs_jobname:
            pbs_flags.append('-N {0}'.format(pbs_jobname))

    # TODO: Only vayu uses -wd
    pbs_flags.append('-l wd')
    pbs_flags.append('-j oe')
    pbs_flags.append('-v model={0},count={1},max={2}'.format(
                        model_name, counter, max_counter))

    pbs_flags = ' '.join(pbs_flags)

    run_cmd = os.path.join(os.path.dirname(__file__), 'payu-run')
    cmd = 'qsub {0} {1}'.format(pbs_flags, run_cmd)

    cmd = shlex.split(cmd)
    rc = sp.call(cmd)
    assert rc == 0


#--
def call_collate(model_name, config_path, counter, max_counter):
    # TODO: multiple submission support

    pbs_flags = []
    with open(config_path, 'r') as config_file:
        config = yaml.load(config_file)

        pbs_flags.append('-q copyq')

        pbs_project = config.get('project', os.environ['PROJECT'])
        pbs_flags.append('-P {0}'.format(pbs_project))

        pbs_walltime = config.get('collate_walltime')
        if pbs_walltime:
            pbs_flags.append('-l walltime={0}'.format(pbs_walltime))

        pbs_ncpus = 1
        pbs_flags.append('-l ncpus={0}'.format(pbs_ncpus))

        mem_resource = 'vmem' if gethostname().startswith('vayu') else 'mem'
        pbs_mem = config.get('collate_mem')
        if pbs_mem:
            pbs_flags.append('-l {0}={1}'.format(mem_resource, pbs_mem))

        pbs_jobname = config.get('jobname')
        pbs_collname = pbs_jobname + '_c'
        if pbs_jobname:
            pbs_flags.append('-N {0}'.format(pbs_collname))

    pbs_flags.append('-l wd')
    pbs_flags.append('-j oe')
    pbs_flags.append('-v model={0},count={1}'.format(model_name, counter))

    pbs_flags = ' '.join(pbs_flags)

    collate_cmd = os.path.join(os.path.dirname(__file__), 'payu-collate')
    cmd = 'qsub {0} {1}'.format(pbs_flags, collate_cmd)

    cmd = shlex.split(cmd)
    rc = sp.call(cmd)
    assert rc == 0


#---
def call_sweep(model_name, config_path, hard_sweep=False):

    cmd = 'payu-sweep -m {0} -c {1}'.format(model_name, config_path)
    if hard_sweep:
        cmd = ' '.join([cmd, '--hard'])

    cmd = shlex.split(cmd)
    rc = sp.call(cmd)
    assert rc == 0


#---
def call_list():
    print('Supported models: {0}'.format(' '.join(model_index.keys())))


#-------------------------
if __name__ == '__main__':

    # Default to display help if no subcommands or arguments are provided
    # NOTE: This can be removed after argparse supports default subparsers
    if len(sys.argv) == 1:
        sys.argv.append('-h')

    payu_parse()
